#include "ur_kin.h"

#include <math.h>
#include <stdio.h>

namespace ur_kinematics {
    
    namespace {
        const double ZERO_THRESH = 0.00000001;
        int SIGN(double x) {
            return (x > 0) - (x < 0);
        }
        const double PI = M_PI;
        
        const double d1 =  0.089159;
        const double a2 = -0.42500;
        const double a3 = -0.39225;
        const double d4 =  0.10915;
        const double d5 =  0.09465;
        const double d6 =  0.0823;
    }
    
    void forward(const double* q, double* T) {
        double s1 = sin(*q), c1 = cos(*q); q++;
        double q234 = *q, s2 = sin(*q), c2 = cos(*q); q++;
        double s3 = sin(*q), c3 = cos(*q); q234 += *q; q++;
        q234 += *q; q++;
        double s5 = sin(*q), c5 = cos(*q); q++;
        double s6 = sin(*q), c6 = cos(*q);
        double s234 = sin(q234), c234 = cos(q234);
        *T = ((c1*c234-s1*s234)*s5)/2.0 - c5*s1 + ((c1*c234+s1*s234)*s5)/2.0; T++;
        *T = (c6*(s1*s5 + ((c1*c234-s1*s234)*c5)/2.0 + ((c1*c234+s1*s234)*c5)/2.0) -
              (s6*((s1*c234+c1*s234) - (s1*c234-c1*s234)))/2.0); T++;
        *T = (-(c6*((s1*c234+c1*s234) - (s1*c234-c1*s234)))/2.0 -
              s6*(s1*s5 + ((c1*c234-s1*s234)*c5)/2.0 + ((c1*c234+s1*s234)*c5)/2.0)); T++;
        *T = ((d5*(s1*c234-c1*s234))/2.0 - (d5*(s1*c234+c1*s234))/2.0 -
              d4*s1 + (d6*(c1*c234-s1*s234)*s5)/2.0 + (d6*(c1*c234+s1*s234)*s5)/2.0 -
              a2*c1*c2 - d6*c5*s1 - a3*c1*c2*c3 + a3*c1*s2*s3); T++;
        *T = c1*c5 + ((s1*c234+c1*s234)*s5)/2.0 + ((s1*c234-c1*s234)*s5)/2.0; T++;
        *T = (c6*(((s1*c234+c1*s234)*c5)/2.0 - c1*s5 + ((s1*c234-c1*s234)*c5)/2.0) +
              s6*((c1*c234-s1*s234)/2.0 - (c1*c234+s1*s234)/2.0)); T++;
        *T = (c6*((c1*c234-s1*s234)/2.0 - (c1*c234+s1*s234)/2.0) -
              s6*(((s1*c234+c1*s234)*c5)/2.0 - c1*s5 + ((s1*c234-c1*s234)*c5)/2.0)); T++;
        *T = ((d5*(c1*c234-s1*s234))/2.0 - (d5*(c1*c234+s1*s234))/2.0 + d4*c1 +
              (d6*(s1*c234+c1*s234)*s5)/2.0 + (d6*(s1*c234-c1*s234)*s5)/2.0 + d6*c1*c5 -
              a2*c2*s1 - a3*c2*c3*s1 + a3*s1*s2*s3); T++;
        *T = ((c234*c5-s234*s5)/2.0 - (c234*c5+s234*s5)/2.0); T++;
        *T = ((s234*c6-c234*s6)/2.0 - (s234*c6+c234*s6)/2.0 - s234*c5*c6); T++;
        *T = (s234*c5*s6 - (c234*c6+s234*s6)/2.0 - (c234*c6-s234*s6)/2.0); T++;
        *T = (d1 + (d6*(c234*c5-s234*s5))/2.0 + a3*(s2*c3+c2*s3) + a2*s2 -
              (d6*(c234*c5+s234*s5))/2.0 - d5*c234); T++;
        *T = 0.0; T++; *T = 0.0; T++; *T = 0.0; T++; *T = 1.0;
    }
    
    void valuing(const int k, double* T){
        double mat[100*16] = {
            6.1232e-17,-0.99976,0.021905,-0.392,1,6.1218e-17,-1.3413e-18,0.4,0,0.021905,0.99976,0.2,0,0,0,1,6.1232e-17,-0.99904,0.043713,-0.384,1,6.1174e-17,-2.6767e-18,0.4,0,0.043713,0.99904,0.2,0,0,0,1,6.1232e-17,-0.99786,0.065329,-0.376,1,6.1102e-17,-4.0002e-18,0.4,0,0.065329,0.99786,0.2,0,0,0,1,6.1232e-17,-0.99624,0.086656,-0.368,1,6.1002e-17,-5.3062e-18,0.4,0,0.086656,0.99624,0.2,0,0,0,1,6.1232e-17,-0.99419,0.1076,-0.36,1,6.0877e-17,-6.5888e-18,0.4,0,0.1076,0.99419,0.2,0,0,0,1,6.1232e-17,-0.99176,0.12808,-0.352,1,6.0728e-17,-7.8427e-18,0.4,0,0.12808,0.99176,0.2,0,0,0,1,6.1232e-17,-0.98899,0.148,-0.344,1,6.0558e-17,-9.0626e-18,0.4,0,0.148,0.98899,0.2,0,0,0,1,6.1232e-17,-0.98591,0.16729,-0.336,1,6.0369e-17,-1.0243e-17,0.4,0,0.16729,0.98591,0.2,0,0,0,1,6.1232e-17,-0.98258,0.18586,-0.328,1,6.0165e-17,-1.138e-17,0.4,0,0.18586,0.98258,0.2,0,0,0,1,6.1232e-17,-0.97905,0.20364,-0.32,1,5.9949e-17,-1.2469e-17,0.4,0,0.20364,0.97905,0.2,0,0,0,1,6.1232e-17,-0.97537,0.22056,-0.312,1,5.9724e-17,-1.3505e-17,0.4,0,0.22056,0.97537,0.2,0,0,0,1,6.1232e-17,-0.97162,0.23657,-0.304,1,5.9494e-17,-1.4486e-17,0.4,0,0.23657,0.97162,0.2,0,0,0,1,6.1232e-17,-0.96783,0.2516,-0.296,1,5.9263e-17,-1.5406e-17,0.4,0,0.2516,0.96783,0.2,0,0,0,1,6.1232e-17,-0.96408,0.2656,-0.288,1,5.9033e-17,-1.6263e-17,0.4,0,0.2656,0.96408,0.2,0,0,0,1,6.1232e-17,-0.96043,0.27852,-0.28,1,5.8809e-17,-1.7055e-17,0.4,0,0.27852,0.96043,0.2,0,0,0,1,6.1232e-17,-0.95693,0.29033,-0.272,1,5.8595e-17,-1.7778e-17,0.4,0,0.29033,0.95693,0.2,0,0,0,1,6.1232e-17,-0.95363,0.30099,-0.264,1,5.8393e-17,-1.843e-17,0.4,0,0.30099,0.95363,0.2,0,0,0,1,6.1232e-17,-0.95058,0.31047,-0.256,1,5.8206e-17,-1.9011e-17,0.4,0,0.31047,0.95058,0.2,0,0,0,1,6.1232e-17,-0.94785,0.31873,-0.248,1,5.8039e-17,-1.9517e-17,0.4,0,0.31873,0.94785,0.2,0,0,0,1,6.1232e-17,-0.94545,0.32576,-0.24,1,5.7892e-17,-1.9947e-17,0.4,0,0.32576,0.94545,0.2,0,0,0,1,6.1232e-17,-0.94344,0.33153,-0.232,1,5.7769e-17,-2.0301e-17,0.4,0,0.33153,0.94344,0.2,0,0,0,1,6.1232e-17,-0.94185,0.33604,-0.224,1,5.7672e-17,-2.0577e-17,0.4,0,0.33604,0.94185,0.2,0,0,0,1,6.1232e-17,-0.94069,0.33927,-0.216,1,5.7601e-17,-2.0774e-17,0.4,0,0.33927,0.94069,0.2,0,0,0,1,6.1232e-17,-0.93999,0.34121,-0.208,1,5.7558e-17,-2.0893e-17,0.4,0,0.34121,0.93999,0.2,0,0,0,1,6.1232e-17,-0.93975,0.34185,-0.2,1,5.7543e-17,-2.0933e-17,0.4,0,0.34185,0.93975,0.2,0,0,0,1,6.1232e-17,-0.93999,0.34121,-0.192,1,5.7558e-17,-2.0893e-17,0.4,0,0.34121,0.93999,0.2,0,0,0,1,6.1232e-17,-0.94069,0.33927,-0.184,1,5.7601e-17,-2.0774e-17,0.4,0,0.33927,0.94069,0.2,0,0,0,1,6.1232e-17,-0.94185,0.33604,-0.176,1,5.7672e-17,-2.0577e-17,0.4,0,0.33604,0.94185,0.2,0,0,0,1,6.1232e-17,-0.94344,0.33153,-0.168,1,5.7769e-17,-2.0301e-17,0.4,0,0.33153,0.94344,0.2,0,0,0,1,6.1232e-17,-0.94545,0.32576,-0.16,1,5.7892e-17,-1.9947e-17,0.4,0,0.32576,0.94545,0.2,0,0,0,1,6.1232e-17,-0.94785,0.31873,-0.152,1,5.8039e-17,-1.9517e-17,0.4,0,0.31873,0.94785,0.2,0,0,0,1,6.1232e-17,-0.95058,0.31047,-0.144,1,5.8206e-17,-1.9011e-17,0.4,0,0.31047,0.95058,0.2,0,0,0,1,6.1232e-17,-0.95363,0.30099,-0.136,1,5.8393e-17,-1.843e-17,0.4,0,0.30099,0.95363,0.2,0,0,0,1,6.1232e-17,-0.95693,0.29033,-0.128,1,5.8595e-17,-1.7778e-17,0.4,0,0.29033,0.95693,0.2,0,0,0,1,6.1232e-17,-0.96043,0.27852,-0.12,1,5.8809e-17,-1.7055e-17,0.4,0,0.27852,0.96043,0.2,0,0,0,1,6.1232e-17,-0.96408,0.2656,-0.112,1,5.9033e-17,-1.6263e-17,0.4,0,0.2656,0.96408,0.2,0,0,0,1,6.1232e-17,-0.96783,0.2516,-0.104,1,5.9263e-17,-1.5406e-17,0.4,0,0.2516,0.96783,0.2,0,0,0,1,6.1232e-17,-0.97162,0.23657,-0.096,1,5.9494e-17,-1.4486e-17,0.4,0,0.23657,0.97162,0.2,0,0,0,1,6.1232e-17,-0.97537,0.22056,-0.088,1,5.9724e-17,-1.3505e-17,0.4,0,0.22056,0.97537,0.2,0,0,0,1,6.1232e-17,-0.97905,0.20364,-0.08,1,5.9949e-17,-1.2469e-17,0.4,0,0.20364,0.97905,0.2,0,0,0,1,6.1232e-17,-0.98258,0.18586,-0.072,1,6.0165e-17,-1.138e-17,0.4,0,0.18586,0.98258,0.2,0,0,0,1,6.1232e-17,-0.98591,0.16729,-0.064,1,6.0369e-17,-1.0243e-17,0.4,0,0.16729,0.98591,0.2,0,0,0,1,6.1232e-17,-0.98899,0.148,-0.056,1,6.0558e-17,-9.0626e-18,0.4,0,0.148,0.98899,0.2,0,0,0,1,6.1232e-17,-0.99176,0.12808,-0.048,1,6.0728e-17,-7.8427e-18,0.4,0,0.12808,0.99176,0.2,0,0,0,1,6.1232e-17,-0.99419,0.1076,-0.04,1,6.0877e-17,-6.5888e-18,0.4,0,0.1076,0.99419,0.2,0,0,0,1,6.1232e-17,-0.99624,0.086656,-0.032,1,6.1002e-17,-5.3062e-18,0.4,0,0.086656,0.99624,0.2,0,0,0,1,6.1232e-17,-0.99786,0.065329,-0.024,1,6.1102e-17,-4.0002e-18,0.4,0,0.065329,0.99786,0.2,0,0,0,1,6.1232e-17,-0.99904,0.043713,-0.016,1,6.1174e-17,-2.6767e-18,0.4,0,0.043713,0.99904,0.2,0,0,0,1,6.1232e-17,-0.99976,0.021905,-0.008,1,6.1218e-17,-1.3413e-18,0.4,0,0.021905,0.99976,0.2,0,0,0,1,6.1232e-17,-1,-1.1221e-16,0,1,6.1232e-17,6.871e-33,0.4,0,-1.1221e-16,1,0.2,0,0,0,1,6.1232e-17,-0.99976,-0.021905,0.008,1,6.1218e-17,1.3413e-18,0.4,0,-0.021905,0.99976,0.2,0,0,0,1,6.1232e-17,-0.99904,-0.043713,0.016,1,6.1174e-17,2.6767e-18,0.4,0,-0.043713,0.99904,0.2,0,0,0,1,6.1232e-17,-0.99786,-0.065329,0.024,1,6.1102e-17,4.0002e-18,0.4,0,-0.065329,0.99786,0.2,0,0,0,1,6.1232e-17,-0.99624,-0.086656,0.032,1,6.1002e-17,5.3062e-18,0.4,0,-0.086656,0.99624,0.2,0,0,0,1,6.1232e-17,-0.99419,-0.1076,0.04,1,6.0877e-17,6.5888e-18,0.4,0,-0.1076,0.99419,0.2,0,0,0,1,6.1232e-17,-0.99176,-0.12808,0.048,1,6.0728e-17,7.8427e-18,0.4,0,-0.12808,0.99176,0.2,0,0,0,1,6.1232e-17,-0.98899,-0.148,0.056,1,6.0558e-17,9.0626e-18,0.4,0,-0.148,0.98899,0.2,0,0,0,1,6.1232e-17,-0.98591,-0.16729,0.064,1,6.0369e-17,1.0243e-17,0.4,0,-0.16729,0.98591,0.2,0,0,0,1,6.1232e-17,-0.98258,-0.18586,0.072,1,6.0165e-17,1.138e-17,0.4,0,-0.18586,0.98258,0.2,0,0,0,1,6.1232e-17,-0.97905,-0.20364,0.08,1,5.9949e-17,1.2469e-17,0.4,0,-0.20364,0.97905,0.2,0,0,0,1,6.1232e-17,-0.97537,-0.22056,0.088,1,5.9724e-17,1.3505e-17,0.4,0,-0.22056,0.97537,0.2,0,0,0,1,6.1232e-17,-0.97162,-0.23657,0.096,1,5.9494e-17,1.4486e-17,0.4,0,-0.23657,0.97162,0.2,0,0,0,1,6.1232e-17,-0.96783,-0.2516,0.104,1,5.9263e-17,1.5406e-17,0.4,0,-0.2516,0.96783,0.2,0,0,0,1,6.1232e-17,-0.96408,-0.2656,0.112,1,5.9033e-17,1.6263e-17,0.4,0,-0.2656,0.96408,0.2,0,0,0,1,6.1232e-17,-0.96043,-0.27852,0.12,1,5.8809e-17,1.7055e-17,0.4,0,-0.27852,0.96043,0.2,0,0,0,1,6.1232e-17,-0.95693,-0.29033,0.128,1,5.8595e-17,1.7778e-17,0.4,0,-0.29033,0.95693,0.2,0,0,0,1,6.1232e-17,-0.95363,-0.30099,0.136,1,5.8393e-17,1.843e-17,0.4,0,-0.30099,0.95363,0.2,0,0,0,1,6.1232e-17,-0.95058,-0.31047,0.144,1,5.8206e-17,1.9011e-17,0.4,0,-0.31047,0.95058,0.2,0,0,0,1,6.1232e-17,-0.94785,-0.31873,0.152,1,5.8039e-17,1.9517e-17,0.4,0,-0.31873,0.94785,0.2,0,0,0,1,6.1232e-17,-0.94545,-0.32576,0.16,1,5.7892e-17,1.9947e-17,0.4,0,-0.32576,0.94545,0.2,0,0,0,1,6.1232e-17,-0.94344,-0.33153,0.168,1,5.7769e-17,2.0301e-17,0.4,0,-0.33153,0.94344,0.2,0,0,0,1,6.1232e-17,-0.94185,-0.33604,0.176,1,5.7672e-17,2.0577e-17,0.4,0,-0.33604,0.94185,0.2,0,0,0,1,6.1232e-17,-0.94069,-0.33927,0.184,1,5.7601e-17,2.0774e-17,0.4,0,-0.33927,0.94069,0.2,0,0,0,1,6.1232e-17,-0.93999,-0.34121,0.192,1,5.7558e-17,2.0893e-17,0.4,0,-0.34121,0.93999,0.2,0,0,0,1,6.1232e-17,-0.93975,-0.34185,0.2,1,5.7543e-17,2.0933e-17,0.4,0,-0.34185,0.93975,0.2,0,0,0,1,6.1232e-17,-0.93999,-0.34121,0.208,1,5.7558e-17,2.0893e-17,0.4,0,-0.34121,0.93999,0.2,0,0,0,1,6.1232e-17,-0.94069,-0.33927,0.216,1,5.7601e-17,2.0774e-17,0.4,0,-0.33927,0.94069,0.2,0,0,0,1,6.1232e-17,-0.94185,-0.33604,0.224,1,5.7672e-17,2.0577e-17,0.4,0,-0.33604,0.94185,0.2,0,0,0,1,6.1232e-17,-0.94344,-0.33153,0.232,1,5.7769e-17,2.0301e-17,0.4,0,-0.33153,0.94344,0.2,0,0,0,1,6.1232e-17,-0.94545,-0.32576,0.24,1,5.7892e-17,1.9947e-17,0.4,0,-0.32576,0.94545,0.2,0,0,0,1,6.1232e-17,-0.94785,-0.31873,0.248,1,5.8039e-17,1.9517e-17,0.4,0,-0.31873,0.94785,0.2,0,0,0,1,6.1232e-17,-0.95058,-0.31047,0.256,1,5.8206e-17,1.9011e-17,0.4,0,-0.31047,0.95058,0.2,0,0,0,1,6.1232e-17,-0.95363,-0.30099,0.264,1,5.8393e-17,1.843e-17,0.4,0,-0.30099,0.95363,0.2,0,0,0,1,6.1232e-17,-0.95693,-0.29033,0.272,1,5.8595e-17,1.7778e-17,0.4,0,-0.29033,0.95693,0.2,0,0,0,1,6.1232e-17,-0.96043,-0.27852,0.28,1,5.8809e-17,1.7055e-17,0.4,0,-0.27852,0.96043,0.2,0,0,0,1,6.1232e-17,-0.96408,-0.2656,0.288,1,5.9033e-17,1.6263e-17,0.4,0,-0.2656,0.96408,0.2,0,0,0,1,6.1232e-17,-0.96783,-0.2516,0.296,1,5.9263e-17,1.5406e-17,0.4,0,-0.2516,0.96783,0.2,0,0,0,1,6.1232e-17,-0.97162,-0.23657,0.304,1,5.9494e-17,1.4486e-17,0.4,0,-0.23657,0.97162,0.2,0,0,0,1,6.1232e-17,-0.97537,-0.22056,0.312,1,5.9724e-17,1.3505e-17,0.4,0,-0.22056,0.97537,0.2,0,0,0,1,6.1232e-17,-0.97905,-0.20364,0.32,1,5.9949e-17,1.2469e-17,0.4,0,-0.20364,0.97905,0.2,0,0,0,1,6.1232e-17,-0.98258,-0.18586,0.328,1,6.0165e-17,1.138e-17,0.4,0,-0.18586,0.98258,0.2,0,0,0,1,6.1232e-17,-0.98591,-0.16729,0.336,1,6.0369e-17,1.0243e-17,0.4,0,-0.16729,0.98591,0.2,0,0,0,1,6.1232e-17,-0.98899,-0.148,0.344,1,6.0558e-17,9.0626e-18,0.4,0,-0.148,0.98899,0.2,0,0,0,1,6.1232e-17,-0.99176,-0.12808,0.352,1,6.0728e-17,7.8427e-18,0.4,0,-0.12808,0.99176,0.2,0,0,0,1,6.1232e-17,-0.99419,-0.1076,0.36,1,6.0877e-17,6.5888e-18,0.4,0,-0.1076,0.99419,0.2,0,0,0,1,6.1232e-17,-0.99624,-0.086656,0.368,1,6.1002e-17,5.3062e-18,0.4,0,-0.086656,0.99624,0.2,0,0,0,1,6.1232e-17,-0.99786,-0.065329,0.376,1,6.1102e-17,4.0002e-18,0.4,0,-0.065329,0.99786,0.2,0,0,0,1,6.1232e-17,-0.99904,-0.043713,0.384,1,6.1174e-17,2.6767e-18,0.4,0,-0.043713,0.99904,0.2,0,0,0,1,6.1232e-17,-0.99976,-0.021905,0.392,1,6.1218e-17,1.3413e-18,0.4,0,-0.021905,0.99976,0.2,0,0,0,1,6.1232e-17,-1,2.2442e-16,0.4,1,6.1232e-17,-1.3742e-32,0.4,0,2.2442e-16,1,0.2,0,0,0,1
};
        
        for (int i=0; i<16; i++) {
            *T = mat[i+k*16];
            T++;
        }
    }
    
    int inverse(const double* T, double* q_sols, double q6_des) {
        int num_sols = 0;
        double T02 = -*T; T++; double T00 =  *T; T++; double T01 =  *T; T++; double T03 = -*T; T++;
        double T12 = -*T; T++; double T10 =  *T; T++; double T11 =  *T; T++; double T13 = -*T; T++;
        double T22 =  *T; T++; double T20 = -*T; T++; double T21 = -*T; T++; double T23 =  *T;
        
        ////////////////////////////// shoulder rotate joint (q1) //////////////////////////////
        double q1[2];
        {
            double A = d6*T12 - T13;
            double B = d6*T02 - T03;
            double R = A*A + B*B;
            if(fabs(A) < ZERO_THRESH) {
                double div;
                if(fabs(fabs(d4) - fabs(B)) < ZERO_THRESH)
                    div = -SIGN(d4)*SIGN(B);
                else
                    div = -d4/B;
                double arcsin = asin(div);
                if(fabs(arcsin) < ZERO_THRESH)
                    arcsin = 0.0;
                if(arcsin < 0.0)
                    q1[0] = arcsin + 2.0*PI;
                else
                    q1[0] = arcsin;
                q1[1] = PI - arcsin;
            }
            else if(fabs(B) < ZERO_THRESH) {
                double div;
                if(fabs(fabs(d4) - fabs(A)) < ZERO_THRESH)
                    div = SIGN(d4)*SIGN(A);
                else
                    div = d4/A;
                double arccos = acos(div);
                q1[0] = arccos;
                q1[1] = 2.0*PI - arccos;
            }
            else if(d4*d4 > R) {
                return num_sols;
            }
            else {
                double arccos = acos(d4 / sqrt(R)) ;
                double arctan = atan2(-B, A);
                double pos = arccos + arctan;
                double neg = -arccos + arctan;
                if(fabs(pos) < ZERO_THRESH)
                    pos = 0.0;
                if(fabs(neg) < ZERO_THRESH)
                    neg = 0.0;
                if(pos >= 0.0)
                    q1[0] = pos;
                else
                    q1[0] = 2.0*PI + pos;
                if(neg >= 0.0)
                    q1[1] = neg;
                else
                    q1[1] = 2.0*PI + neg;
            }
        }
        ////////////////////////////////////////////////////////////////////////////////
        
        ////////////////////////////// wrist 2 joint (q5) //////////////////////////////
        double q5[2][2];
        {
            for(int i=0;i<2;i++) {
                double numer = (T03*sin(q1[i]) - T13*cos(q1[i])-d4);
                double div;
                if(fabs(fabs(numer) - fabs(d6)) < ZERO_THRESH)
                    div = SIGN(numer) * SIGN(d6);
                else
                    div = numer / d6;
                double arccos = acos(div);
                q5[i][0] = arccos;
                q5[i][1] = 2.0*PI - arccos;
            }
        }
        ////////////////////////////////////////////////////////////////////////////////
        
        {
            for(int i=0;i<2;i++) {
                for(int j=0;j<2;j++) {
                    double c1 = cos(q1[i]), s1 = sin(q1[i]);
                    double c5 = cos(q5[i][j]), s5 = sin(q5[i][j]);
                    double q6;
                    ////////////////////////////// wrist 3 joint (q6) //////////////////////////////
                    if(fabs(s5) < ZERO_THRESH)
                        q6 = q6_des;
                    else {
                        q6 = atan2(SIGN(s5)*-(T01*s1 - T11*c1),
                                   SIGN(s5)*(T00*s1 - T10*c1));
                        if(fabs(q6) < ZERO_THRESH)
                            q6 = 0.0;
                        if(q6 < 0.0)
                            q6 += 2.0*PI;
                    }
                    ////////////////////////////////////////////////////////////////////////////////
                    
                    double q2[2], q3[2], q4[2];
                    ///////////////////////////// RRR joints (q2,q3,q4) ////////////////////////////
                    double c6 = cos(q6), s6 = sin(q6);
                    double x04x = -s5*(T02*c1 + T12*s1) - c5*(s6*(T01*c1 + T11*s1) - c6*(T00*c1 + T10*s1));
                    double x04y = c5*(T20*c6 - T21*s6) - T22*s5;
                    double p13x = d5*(s6*(T00*c1 + T10*s1) + c6*(T01*c1 + T11*s1)) - d6*(T02*c1 + T12*s1) +
                    T03*c1 + T13*s1;
                    double p13y = T23 - d1 - d6*T22 + d5*(T21*c6 + T20*s6);
                    
                    double c3 = (p13x*p13x + p13y*p13y - a2*a2 - a3*a3) / (2.0*a2*a3);
                    if(fabs(fabs(c3) - 1.0) < ZERO_THRESH)
                        c3 = SIGN(c3);
                    else if(fabs(c3) > 1.0) {
                        // TODO NO SOLUTION
                        continue;
                    }
                    double arccos = acos(c3);
                    q3[0] = arccos;
                    q3[1] = 2.0*PI - arccos;
                    double denom = a2*a2 + a3*a3 + 2*a2*a3*c3;
                    double s3 = sin(arccos);
                    double A = (a2 + a3*c3), B = a3*s3;
                    q2[0] = atan2((A*p13y - B*p13x) / denom, (A*p13x + B*p13y) / denom);
                    q2[1] = atan2((A*p13y + B*p13x) / denom, (A*p13x - B*p13y) / denom);
                    double c23_0 = cos(q2[0]+q3[0]);
                    double s23_0 = sin(q2[0]+q3[0]);
                    double c23_1 = cos(q2[1]+q3[1]);
                    double s23_1 = sin(q2[1]+q3[1]);
                    q4[0] = atan2(c23_0*x04y - s23_0*x04x, x04x*c23_0 + x04y*s23_0);
                    q4[1] = atan2(c23_1*x04y - s23_1*x04x, x04x*c23_1 + x04y*s23_1);
                    ////////////////////////////////////////////////////////////////////////////////
                    for(int k=0;k<2;k++) {
                        if(fabs(q2[k]) < ZERO_THRESH)
                            q2[k] = 0.0;
                        else if(q2[k] < 0.0) q2[k] += 2.0*PI;
                        if(fabs(q4[k]) < ZERO_THRESH)
                            q4[k] = 0.0;
                        else if(q4[k] < 0.0) q4[k] += 2.0*PI;
                        q_sols[num_sols*6+0] = q1[i];    q_sols[num_sols*6+1] = q2[k];
                        q_sols[num_sols*6+2] = q3[k];    q_sols[num_sols*6+3] = q4[k];
                        q_sols[num_sols*6+4] = q5[i][j]; q_sols[num_sols*6+5] = q6;
                        num_sols++;
                    }
                    
                }
            }
        }
        return num_sols;
    }
};

using namespace std;
using namespace ur_kinematics;

int main(int argc, char* argv[])
{
    double* T = new double[16];
    //double q[6] = {0.0, 0.0, 1.0, 0.0, 1.0, 0.0};
    //forward(q, T);

    double q_sols[8*6];
    int num_sols;
    for (int k=0;k<100;k++){
        double* T = new double[16];
        valuing(k, T);
        num_sols = inverse(T, q_sols);
        for(int i=0;i<6;i++){
            
//            if ((i==0 || i==2) && q_sols[i*6+5]==0)
            if (q_sols[i*6+0] < 3)
                if (q_sols[i*6+1] > 3)
                    if (q_sols[i*6+3] > 3)
//                        if (q_sols[i*6+4] < 4)
                printf("%1.6f %1.6f %1.6f %1.6f %1.6f %1.6f;\n",
                       q_sols[i*6+0], q_sols[i*6+1], q_sols[i*6+2], q_sols[i*6+3], q_sols[i*6+4], q_sols[i*6+5]);
        }
        //printf("\n");
    }
    
    return 0;
}
